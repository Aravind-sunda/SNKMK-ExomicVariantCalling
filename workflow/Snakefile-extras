# --- Deepvariant pipeline TRIAL--- #
# rule deepvariant_gvcf:
#     input:
#         bam="results/{sample}/{sample}.aligned_fixmates_sorted.bam",
#         ref="reference/genome.fa"
#     output:
#         vcf="results/deepvariant/vcf/dv_{sample}.vcf.gz",
#         gvcf="results/deepvariant/gvcfs/dv_{sample}.g.vcf.gz"
#     params:
#         model="wes",   # {wgs, wes, pacbio, hybrid}
#         extra=""
#     threads: 8
#     conda:
#     # uses an existing environment called deepvariant in saravind directory in the cjdgenomics project scc
#     # alternative choice is to use the deepvariant.yaml file in the envs directory. It does not work. need to find workaround with the rule below
#         "deepvariant"
#     log:
#         "logs/deepvariant/{sample}/stdout.log"
#     wrapper:
#         "v3.10.2/bio/deepvariant"

# Adapted from : https://github.com/yiolino/snakemake-deepvariant/tree/master
# rule call_variants(wrapper):
#     input:
#         bam = "results/{sample}/{sample}.aligned_fixmates_sorted.bam",
#         bai = "results/{sample}/{sample}.aligned_fixmates_sorted.bam.bai"
#         ref = "reference/genome.fa",
#         idx = "reference/genome.fa.fai" 
#     output:
#         vcf="results/deepvariant/vcf/dv_{sample}.vcf.gz",
#         gvcf="results/deepvariant/gvcfs/dv_{sample}.g.vcf.gz",
#     params:
#         model="wes",
#         extra=""
#     threads: 8
#     log:
#         "logs/deepvariant/{sample}/stdout.log"
#     conda:
#         "envs/deepvariant.yaml"
#     script:
#         "scripts/deepvariant.py"

# rule merge_vcfs:
#     input:
#         vcf=expand("results/deepvariant/vcf/dv_{sample}.vcf.gz", sample=names),
#         gvcf=expand("results/deepvariant/gvcfs/dv_{sample}.g.vcf.gz", sample=names)
#     output:
#         vcf_merged="results/deepvariant/vcf/dv_all_samples.vcf.gz",
#         gvcf_merged="results/deepvariant/gvcfs/dv_all_samples.g.vcf.gz",
#     conda:
#         "envs/bcftools.yaml"
#     shell:
#         """
#         bcftools merge -O z -m none -o {output.vcf_merged} {input.vcf}
#         bcftools merge -O z -m none -o {output.gvcf_merged} {input.gvcf}
#         """

# rule deepvariant(docker):
#     input:
#         bam = "results/{sample}/{sample}.aligned_fixmates_sorted.bam",
#         ref = "reference/genome.fa",
#         idx = "reference/genome.fa.fai",
#         temp_dir = directory("/restricted/projectnb/cjdgenomics/CJD_GenomicsVariantCalling_20240430/OUTPUTS-TEMP"),
#         input_dir = directory("results/{sample}"),
#         # output_dir = directory("results/deepvariant")
        
#     output:
#         vcf="results/deepvariant/vcf/dv_{sample}.vcf.gz",
#         gvcf="results/deepvariant/gvcfs/dv_{sample}.g.vcf.gz"
#     threads:8
#     singularity:
#         "docker://google/deepvariant:1.6.1"
#     shell:
#         """
#         # scc-singularity run -B /usr/lib/locale/:/usr/lib/locale/ \
#         docker://google/deepvariant:1.6.1 \
#         /opt/deepvariant/bin/run_deepvariant \
#         --model_type=WES \
#         --ref={input.ref} \
#         --reads={input.bam} \
#         # --regions "chr20:10,000,000-10,010,000" \
#         --output_vcf={output.vcf} \
#         --output_gvcf={output.gvcf} \
#         --intermediate_results_dir {input.temp_dir} \
#         --num_shards={threads}
#         """
#         # """
#         # docker run \
#         # -v {input.input_dir}:"/input" \
#         # -v "results/deepvariant":"/output" \
#         # google/deepvariant:1.6.1 \
#         # /opt/deepvariant/bin/run_deepvariant \
#         # --model_type=WES \  
#         # --ref={input.ref} \
#         # --reads={input.bam} \
#         # --output_vcf={output.vcf} \
#         # --output_gvcf={output.gvcf} \
#         # --num_shards=8 \
#         # --intermediate_results_dir {input.temp_dir} \
#         # --dry_run=false
#         # """